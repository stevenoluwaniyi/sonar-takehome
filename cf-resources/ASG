
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  LatestAmiId:
    Description: Region specific image from the Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id'
  InstanceType:
    Description: Amazon EC2 instance type for the instances
    Type: String
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
    Default: t3.micro

  StackParameterName:
    Description: Name of stack to import
    Type: String
    Default: SonarPrivate

  SGStackParameterName:
    Description: Name of stack to import
    Type: String
    Default: SonarSG

  ClusterStackParameterName:
    Description: Name of stack to import
    Type: String
    Default: SonarECS

  ProfiletackParameterName:
    Description: Name of stack to import
    Type: String
    Default: SonarInstanceProfile

Resources:
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateName: !Sub ${AWS::StackName}-launch-template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !ImportValue
              'Fn::Sub': '${SGStackParameterName}-PrivateSG'
        IamInstanceProfile:
          Arn: 
            !ImportValue
              'Fn::Sub': '${ProfiletackParameterName}-Arn'
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ClusterStackParameterName}-Cluster >> /etc/ecs/ecs.config;

  myASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      AvailabilityZones:
        - Fn::ImportValue:
            'Fn::Sub': '${StackParameterName}-AZ1'
      VPCZoneIdentifier:
          - Fn::ImportValue:
              'Fn::Sub': '${StackParameterName}-PrivateSubnetID1'

  myASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      AvailabilityZones:
        - Fn::ImportValue:
            'Fn::Sub': '${StackParameterName}-AZ2'
      VPCZoneIdentifier:
          - Fn::ImportValue:
              'Fn::Sub': '${StackParameterName}-PrivateSubnetID2'


  myASG3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MaxSize: '1'
      MinSize: '0'
      DesiredCapacity: '1'
      AvailabilityZones:
        - Fn::ImportValue:
            'Fn::Sub': '${StackParameterName}-AZ3'
      VPCZoneIdentifier:
          - Fn::ImportValue:
              'Fn::Sub': '${StackParameterName}-PrivateSubnetID3'

Outputs:
  ASG1:
    Description: ASG
    Value: !Ref myASG1
    Export:
      Name: !Sub "${AWS::StackName}-myASG1"

  ASG2:
    Description: ASG
    Value: !Ref myASG2
    Export:
      Name: !Sub "${AWS::StackName}-myASG2"

  ASG3:
    Description: ASG
    Value: !Ref myASG3
    Export:
      Name: !Sub "${AWS::StackName}-myASG3"

  LaunchTemplate:
    Description: Launch template
    Value: !Ref myLaunchTemplate
    Export:
      Name: !Sub "${AWS::StackName}-LaunchTemplate"

  LaunchTemplateVersion:
    Description: Version of specified launch template
    Value: !GetAtt myLaunchTemplate.LatestVersionNumber
    Export:
      Name: !Sub "${AWS::StackName}-LaunchVersion" 

 

